/*
 * -------------------------------------------------
 *  nf-core/mag Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  input = "data/*{1,2}.fastq.gz"
  manifest = false
  single_end = false
  outdir = './results'
  publish_dir_mode = 'copy'

  // short read preprocessing options
  adapter_forward = "AGATCGGAAGAGCACACGTCTGAACTCCAGTCA"
  adapter_reverse = "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT"
  mean_quality = 15
  trimming_quality = 15
  keep_phix = false
  // phix_reference = "ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/viral/Enterobacteria_phage_phiX174_sensu_lato/all_assembly_versions/GCA_002596845.1_ASM259684v1/GCA_002596845.1_ASM259684v1_genomic.fna.gz"
  phix_reference = "${baseDir}/assets/data/GCA_002596845.1_ASM259684v1_genomic.fna.gz"
  host_fasta = false
  host_genome = false
  host_removal_verysensitive = false
  host_removal_save_ids = false

  // binning options
  skip_binning = false
  min_contig_size = 1500
  min_length_unbinned_contigs = 1000000
  max_unbinned_contigs = 100

  // assembly options
  skip_spades = false
  skip_spadeshybrid = false
  skip_megahit = false
  skip_quast = false

  // taxonomy options
  centrifuge_db = false
  kraken2_db = false
  skip_krona = false
  cat_db = false

  // long read preprocessing options
  skip_adapter_trimming = false
  keep_lambda = false
  longreads_min_length = 1000
  longreads_keep_percent = 90
  longreads_length_weight = 10
  // lambda_reference = "ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/viral/Escherichia_virus_Lambda/all_assembly_versions/GCA_000840245.1_ViralProj14204/GCA_000840245.1_ViralProj14204_genomic.fna.gz"
  lambda_reference = "${baseDir}/assets/data/GCA_000840245.1_ViralProj14204_genomic.fna.gz"

  // Bin QC
  skip_busco = false
  busco_reference = "https://busco-data.ezlab.org/v4/data/lineages/bacteria_odb10.2020-03-06.tar.gz"

  // Reproducibility options
  megahit_fix_cpu_1 = false
  spades_fix_cpus = false
  spadeshybrid_fix_cpus = false
  metabat_rng_seed = 1

  // Boilerplate options
  name = false
  multiqc_config = false
  email = false
  email_on_fail = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  tracedir = "${params.outdir}/pipeline_info"
  igenomes_ignore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/mag:dev'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  test { includeConfig 'conf/test.config' }
  test_host_rm { includeConfig 'conf/test_host_rm.config' }
  test_hybrid { includeConfig 'conf/test_hybrid.config' }
  test_hybrid_host_rm { includeConfig 'conf/test_hybrid_host_rm.config' }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/mag'
  author = 'No author provided'
  homePage = 'https://github.com/nf-core/mag'
  description = 'Assembly, binning and annotation of metagenomes'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

// Funktions to fix number of cpus to allow reproducibility for MEGAHIT and SPAdes
// if corresponding parameters are specified, number of cpus is not increased with retries
def check_megahit_cpus (x, attempt ) {
  if (params.megahit_fix_cpu_1) return 1
  else return check_max (x * attempt, 'cpus' )
}
def check_spades_cpus (x, attempt ) {
  if (params.spades_fix_cpus) return check_max (params.spades_fix_cpus, 'cpus' )
  else return check_max (x * attempt, 'cpus' )
}
def check_spadeshybrid_cpus (x, attempt ) {
  if (params.spadeshybrid_fix_cpus) return check_max (params.spadeshybrid_fix_cpus, 'cpus' )
  else return check_max (x * attempt, 'cpus' )
}