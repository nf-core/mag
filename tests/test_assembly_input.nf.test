nextflow_pipeline {

    name "Test pipeline with test_assembly_input profile"
    script "../main.nf"
    tag "pipeline"
    tag "test_assembly_input"
    profile "test_assembly_input"

    test("-profile assembly_input") {

        when {
            params {
                outdir = "$outputDir"
            }
        }

        then {
            // output dir: Assembly
            def stable_name_assembly = getAllFilesFromDir(
                params.outdir, include: ['Assembly/**'], relative: true, includeDir: false
            )
            def bowtie2_logs = getAllFilesFromDir(
                params.outdir, include: ['Assembly/{SPAdes,MEGAHIT}/QC/*/*.bowtie2.log']
            )

            // output dir: Annotation
            def stable_name_annotation = getAllFilesFromDir(
                params.outdir, include: ['Annotation/**'], relative: true, includeDir: false
            )
            def stable_path_annotation = getAllFilesFromDir(
                params.outdir, include: ['Annotation/**'], ignoreFile: 'tests/.nftignore'
            )

            // output directory: GenomeBinning
            def stable_name_binning = getAllFilesFromDir(
                params.outdir,
                include: ['GenomeBinning/**'],
                ignore: ['GenomeBinning/QC/BUSCO/**/{logs,prodigal_output,busco_sequences}/**'],
                relative: true,
                includeDir: false
            )
            def stable_path_binning = getAllFilesFromDir(
                params.outdir, include: ['GenomeBinning/**'], ignoreFile: 'tests/.nftignore'
            )
            def concoct_logs = getAllFilesFromDir(
                params.outdir, include: ['GenomeBinning/CONCOCT/stats/*_log.txt']
            )
            def busco_logs = getAllFilesFromDir(
                params.outdir, include: ['GenomeBinning/QC/BUSCO/*/*-busco.log']
            )
            def dastool_logs = getAllFilesFromDir(
                params.outdir, include: ['GenomeBinning/DASTool/*.log']
            )

            // output directory: multiqc
            def stable_name_multiqc = getAllFilesFromDir(
                params.outdir, include: ['multiqc/**'], relative: true, includeDir: false
            )
            def stable_path_multiqc = getAllFilesFromDir(
                params.outdir, include: ['multiqc/**'], ignoreFile: 'tests/.nftignore'
            )

            assert workflow.success
            assertAll(
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we test pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/nf_core_mag_software_mqc_versions.yml"),
                ).match() },
                { assert snapshot(stable_name_assembly).match('assembly') },
                { assert snapshot(stable_name_annotation, stable_path_annotation).match('annotation') },
                { assert snapshot(stable_name_binning,  stable_path_binning ).match('binning') },
                { assert snapshot(stable_name_multiqc, stable_path_multiqc).match('multiqc') },

                // Log checks
                { assert bowtie2_logs.collect {
                        log -> log.readLines().last() ==~ /[0-9.]+% overall alignment rate/
                    }.every()
                },
                { assert concoct_logs.collect {
                        log -> log.readLines().last().contains('CONCOCT Finished')
                    }.every()
                },
                { assert busco_logs.collect {
                        log -> log.readLines().any { it.contains('BUSCO analysis done.') }
                    }.every()
                },
                { assert dastool_logs.collect {
                        log -> log.readLines().last().contains("Writing bins")
                    }.every()
                },
            )
        }
    }
}
