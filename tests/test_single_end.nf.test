nextflow_pipeline {

    name "Test pipeline with test_single_end profile"
    script "../main.nf"
    tag "pipeline"
    tag "test_single_end"
    profile "test_single_end"

    test("-profile test_single_end") {

        when {
            params {
                outdir = "$outputDir"
            }
        }

        then {
            // Output dir: QC_shortreads
            def stable_name_qc = getAllFilesFromDir(
                params.outdir, include: ['QC_shortreads/**'], relative: true, includeDir: false
            )
            def stable_path_qc = getAllFilesFromDir(
                params.outdir, include: ['QC_shortreads/**'], ignoreFile: 'tests/.nftignore'
            )

            // Output dir: Assembly
            def stable_name_assembly = getAllFilesFromDir(
                params.outdir, include: ['Assembly/**'], relative: true, includeDir: false
            )
            def stable_path_assembly = getAllFilesFromDir(
                params.outdir, include: ['Assembly/**'], ignoreFile: 'tests/.nftignore'
            )
            def quast_logs = getAllFilesFromDir(
                params.outdir, include: ['Assembly/MEGAHIT/QC/*/QUAST/quast.log']
            )

            // Output directory: multiqc
            def stable_name_multiqc = getAllFilesFromDir(
                params.outdir, include: ['multiqc/**'], relative: true, includeDir: false
            )
            def stable_path_multiqc = getAllFilesFromDir(
                params.outdir, include: ['multiqc/**'], ignoreFile: 'tests/.nftignore'
            )

            assert workflow.success
            assertAll(
                { assert snapshot(
                    workflow.trace.succeeded().size(),
                    removeNextflowVersion("$outputDir/pipeline_info/nf_core_mag_software_mqc_versions.yml"),
                ).match() },
                { assert snapshot(stable_name_qc,       stable_path_qc      ).match('qc') },
                { assert snapshot(stable_name_assembly, stable_path_assembly).match('assembly') },
                { assert snapshot(stable_name_multiqc, stable_path_multiqc  ).match('multiqc') },

                // Log checks
                { assert quast_logs.collect {
                        log -> log.readLines().any { it.contains('Finished:') }
                    }.every()
                },
            )
        }
    }
}
