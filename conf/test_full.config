/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running full-size tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a full size pipeline test.

    Use as follows:
        nextflow run nf-core/mag -profile test_full,<docker/singularity> --outdir <OUTDIR>

----------------------------------------------------------------------------------------
*/

params {
    config_profile_name        = 'Full test profile'
    config_profile_description = 'Full test dataset to check pipeline function'

    // Input data for full size test
    // hg19 reference with highly conserved and low-complexity regions masked by Brian Bushnell
    host_fasta                 = "s3://ngi-igenomes/test-data/mag/hg19_main_mask_ribo_animal_allplant_allfungus.fa.gz"
    input                      = "https://github.com/nf-core/test-datasets/raw/refs/heads/mag/samplesheets/samplesheet.full.v4.csv"

    //cat_db                     = "s3://ngi-igenomes/test-data/mag/CAT_prepare_20210107.tar.gz" // Current full test fails because of multiple classifications that CAT_pack summarise does not support
    gtdb_db                    = "s3://nf-core-awsmegatests/mag/full_test_data/gtdb/release226/"
    skip_gtdbtk                = false

    skip_spades                = false
    skip_spadeshybrid          = true

    // reproducibility options for assembly
    spades_fix_cpus            = 10
    spadeshybrid_fix_cpus      = 10
    megahit_fix_cpu_1          = true

    // mapping options
    longread_percentidentity   = 85

    // available options to enable reproducibility for BUSCO (--busco_db) not used here
    // to allow detection of possible problems in automated lineage selection mode using public databases

    // Skip CONCOCT due to timeout issues
    skip_concoct               = true

    binqc_tool                 = "checkm2"

    // Set Prokka compliance mode to allow metaSPAdes bins to be annotated
    prokka_with_compliance     = true
    prokka_compliance_centre   = "nfcore"
}

process {
    withName: 'NFCORE_MAG:MAG:ASSEMBLY:GUNZIP_LONGREAD_ASSEMBLIES' {
        cpus   = { 1 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:ASSEMBLY:GUNZIP_SHORTREAD_ASSEMBLIES' {
        cpus   = { 1 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:ASSEMBLY:LONGREAD_ASSEMBLY:FLYE' {
        cpus   = { 9 * task.attempt }
        memory = { 56.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:ASSEMBLY:LONGREAD_ASSEMBLY:METAMDBG_ASM' {
        cpus   = { 7 * task.attempt }
        memory = { 9.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:ASSEMBLY:SHORTREAD_ASSEMBLY:MEGAHIT' {
        cpus          = { params.megahit_fix_cpu_1 ? 1 : (8 * task.attempt) }
        memory        = { 4.GB * task.attempt }
        errorStrategy = { task.exitStatus in ((130..145) + 104 + 175 + 250) ? 'retry' : 'finish' }
    }
    withName: 'NFCORE_MAG:MAG:ASSEMBLY:SHORTREAD_ASSEMBLY:METASPADES' {
        cpus          = { params.spades_fix_cpus != -1 ? params.spades_fix_cpus : (10 * task.attempt) }
        memory        = { 24.GB * task.attempt }
        scratch       = true
        errorStrategy = { task.exitStatus in ((130..145) + 104 + 175 + 21 + 12 + 1) ? 'retry' : 'finish' }
    }
    withName: 'NFCORE_MAG:MAG:BINNING:ADJUST_MAXBIN2_EXT' {
        cpus   = { 1 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:BINNING:CONVERT_DEPTHS' {
        cpus   = { 1 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:BINNING:GUNZIP_BINS' {
        cpus   = { 1 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:BINNING:MAXBIN2' {
        cpus          = { 2 * task.attempt }
        memory        = { 2.GB * task.attempt }
        errorStrategy = { task.exitStatus in [1, 255] ? 'ignore' : 'retry' }
    }
    withName: 'NFCORE_MAG:MAG:BINNING:METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS_LONGREAD' {
        cpus   = { 3 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:BINNING:METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS_SHORTREAD' {
        cpus   = { 3 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:BINNING:METABAT2_METABAT2' {
        cpus   = { 7 * task.attempt }
        memory = { 2.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:BINNING:SEQKIT_STATS' {
        cpus   = { 2 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:BINNING:SPLIT_FASTA' {
        cpus   = { 18 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:BINNING_PREPARATION:LONGREAD_BINNING_PREPARATION:MINIMAP2_ASSEMBLY_ALIGN' {
        cpus   = { 13 * task.attempt }
        memory = { 17.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:BINNING_PREPARATION:LONGREAD_BINNING_PREPARATION:MINIMAP2_ASSEMBLY_INDEX' {
        cpus   = { 1 * task.attempt }
        memory = { 2.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:BINNING_PREPARATION:SHORTREAD_BINNING_PREPARATION:BOWTIE2_ASSEMBLY_ALIGN' {
        cpus          = { 3 * task.attempt }
        memory        = { 6.GB * task.attempt }
        errorStrategy = { task.exitStatus in ((130..145) + 104 + 175 + 247) ? 'retry' : 'finish' }
    }
    withName: 'NFCORE_MAG:MAG:BINNING_PREPARATION:SHORTREAD_BINNING_PREPARATION:BOWTIE2_ASSEMBLY_BUILD' {
        cpus   = { 1 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:BIN_QC:CHECKM2_DATABASEDOWNLOAD' {
        cpus   = { 1 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:BIN_QC:CHECKM2_PREDICT' {
        cpus          = { 5 * task.attempt }
        memory        = { 13.GB * task.attempt }
        errorStrategy = { task.exitStatus in ((130..145) + 104 + 175) ? 'retry' : task.exitStatus == 1 ? 'ignore' : 'finish' }
    }
    withName: 'NFCORE_MAG:MAG:BIN_QC:CONCAT_BINQC_TSV' {
        cpus   = { 1 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:BIN_SUMMARY' {
        cpus   = { 18 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:DEPTHS:MAG_DEPTHS' {
        cpus   = { 13 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:DEPTHS:MAG_DEPTHS_PLOT' {
        cpus          = { 14 * task.attempt }
        memory        = { 1.GB * task.attempt }
        errorStrategy = { task.exitStatus in ((130..145) + 104 + 175) ? 'retry' : task.exitStatus == 1 ? 'ignore' : 'finish' }
    }
    withName: 'NFCORE_MAG:MAG:DEPTHS:MAG_DEPTHS_SUMMARY' {
        cpus   = { 17 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:GTDBTK:GTDBTK_CLASSIFYWF' {
        cpus          = { 1 * task.attempt }
        memory        = { 128.GB * task.attempt }
        errorStrategy = { task.exitStatus in ((130..145) + 104 + 175) ? 'retry' : task.exitStatus == 1 ? 'ignore' : 'finish' }
    }
    withName: 'NFCORE_MAG:MAG:GTDBTK:GTDBTK_SUMMARY' {
        cpus   = { 9 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:LONGREAD_PREPROCESSING:FILTLONG' {
        cpus   = { 1 * task.attempt }
        memory = { 19.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:LONGREAD_PREPROCESSING:LONGREAD_HOSTREMOVAL:MINIMAP2_HOST_ALIGN' {
        cpus   = { 11 * task.attempt }
        memory = { 19.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:LONGREAD_PREPROCESSING:LONGREAD_HOSTREMOVAL:MINIMAP2_HOST_INDEX' {
        cpus   = { 1 * task.attempt }
        memory = { 11.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:LONGREAD_PREPROCESSING:LONGREAD_HOSTREMOVAL:SAMTOOLS_HOSTREMOVED_INDEX' {
        cpus   = { 3 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:LONGREAD_PREPROCESSING:LONGREAD_HOSTREMOVAL:SAMTOOLS_HOSTREMOVED_STATS' {
        cpus   = { 2 * task.attempt }
        memory = { 6.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:LONGREAD_PREPROCESSING:LONGREAD_HOSTREMOVAL:SAMTOOLS_HOSTREMOVED_UNMAPPED' {
        cpus   = { 2 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:LONGREAD_PREPROCESSING:NANOLYSE' {
        cpus   = { 2 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:LONGREAD_PREPROCESSING:NANOPLOT_FILTERED' {
        cpus   = { 2 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:LONGREAD_PREPROCESSING:NANOPLOT_RAW' {
        cpus   = { 2 * task.attempt }
        memory = { 2.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:LONGREAD_PREPROCESSING:PORECHOP_ABI' {
        cpus   = { 4 * task.attempt }
        memory = { 30.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:MULTIQC' {
        cpus   = { 1 * task.attempt }
        memory = { 2.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:PRODIGAL' {
        cpus   = { 2 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:PROKKA' {
        cpus   = { 2 * task.attempt }
        memory = { 2.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:QUAST' {
        cpus   = { 2 * task.attempt }
        memory = { 4.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:QUAST_BINS' {
        cpus   = { 7 * task.attempt }
        memory = { 2.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:QUAST_BINS_SUMMARY' {
        cpus   = { 1 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:SHORTREAD_PREPROCESSING:BOWTIE2_HOST_REMOVAL_ALIGN' {
        cpus   = { 12 * task.attempt }
        memory = { 4.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:SHORTREAD_PREPROCESSING:BOWTIE2_HOST_REMOVAL_BUILD' {
        cpus   = { 9 * task.attempt }
        memory = { 6.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:SHORTREAD_PREPROCESSING:BOWTIE2_PHIX_REMOVAL_ALIGN' {
        cpus   = { 6 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:SHORTREAD_PREPROCESSING:BOWTIE2_PHIX_REMOVAL_BUILD' {
        cpus   = { 1 * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:SHORTREAD_PREPROCESSING:FASTP' {
        cpus   = { 8 * task.attempt }
        memory = { 2.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:SHORTREAD_PREPROCESSING:FASTQC_RAW' {
        cpus   = { 2 * task.attempt }
        memory = { 6.GB * task.attempt }
    }
    withName: 'NFCORE_MAG:MAG:SHORTREAD_PREPROCESSING:FASTQC_TRIMMED' {
        cpus   = { 2 * task.attempt }
        memory = { 7.GB * task.attempt }
    }
    errorStrategy = 'retry'
    maxRetries    = 2
}

aws.client.anonymous = true
