/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    //default: do not publish into the results folder
    publishDir = [path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" }, mode: params.publish_dir_mode, saveAs: { filename -> filename.equals('versions.yml') ? null : filename }, enabled: false]

    withName: FASTQC_RAW {
        ext.args   = '--quiet'
        publishDir = [path: { "${params.outdir}/QC_shortreads/fastqc" }, mode: params.publish_dir_mode, pattern: "*.html"]
        ext.prefix = { "${meta.id}_run${meta.run}_raw" }
        tag        = { "${meta.id}_run${meta.run}_raw" }
    }

    withName: FASTP {
        ext.args   = [
            "-q ${params.fastp_qualified_quality}",
            "--cut_front",
            "--cut_tail",
            "--cut_mean_quality ${params.fastp_cut_mean_quality}",
            "--length_required ${params.reads_minlength}",
            params.fastp_trim_polyg ? "--trim_poly_g" : '',
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/QC_shortreads/fastp/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,json}",
            ],
            [
                path: { "${params.outdir}/QC_shortreads/fastp/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz",
                enabled: params.save_clipped_reads,
            ],
        ]
        ext.prefix = { "${meta.id}_run${meta.run}_fastp" }
        tag        = { "${meta.id}_run${meta.run}" }
    }

    withName: TRIMMOMATIC {
        ext.args   = "LEADING:30 TRAILING:30 SLIDINGWINDOW:4:20 MINLEN:35"
        publishDir = [
            [
                path: { "${params.outdir}/QC_shortreads/trimmomatic/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*_trim.log",
            ],
            [
                path: { "${params.outdir}/QC_shortreads/trimmomatic/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz",
                enabled: params.save_clipped_reads,
            ],
        ]
        ext.prefix = { "${meta.id}_run${meta.run}_trimmomatic" }
        tag        = { "${meta.id}_run${meta.run}" }
    }

    withName: ADAPTERREMOVAL_PE {
        ext.args   = [
            "--minlength ${params.reads_minlength}",
            "--adapter1 ${params.adapterremoval_adapter1} --adapter2 ${params.adapterremoval_adapter2}",
            "--minquality ${params.adapterremoval_minquality} --trimns",
            params.adapterremoval_trim_quality_stretch ? "--trim_qualities" : "--trimwindows 4",
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/QC_shortreads/adapterremoval/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.{settings}",
            ],
            [
                path: { "${params.outdir}/QC_shortreads/adapterremoval/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.{truncated,discarded}.gz",
                enabled: params.save_clipped_reads,
            ],
        ]
        ext.prefix = { "${meta.id}_run${meta.run}_ar2" }
        tag        = { "${meta.id}_run${meta.run}" }
    }

    withName: ADAPTERREMOVAL_SE {
        ext.args   = [
            "--minlength ${params.reads_minlength}",
            "--adapter1 ${params.adapterremoval_adapter1}",
            "--minquality ${params.adapterremoval_minquality} --trimns",
            params.adapterremoval_trim_quality_stretch ? "--trim_qualities" : "--trimwindows 4",
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/QC_shortreads/adapterremoval/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{settings}",
        ]
        ext.prefix = { "${meta.id}_run${meta.run}_ar2" }
        tag        = { "${meta.id}_run${meta.run}" }
    }

    withName: BOWTIE2_PHIX_REMOVAL_ALIGN {
        ext.prefix = { "${meta.id}_run${meta.run}_phix_removed" }
        publishDir = [
            [
                path: { "${params.outdir}/QC_shortreads/remove_phix" },
                mode: params.publish_dir_mode,
                pattern: "*.log",
            ],
            [
                path: { "${params.outdir}/QC_shortreads/remove_phix" },
                mode: params.publish_dir_mode,
                pattern: "*.unmapped*.fastq.gz",
                enabled: params.save_phixremoved_reads,
            ],
        ]
        tag        = { "${meta.id}_run${meta.run}" }
    }

    withName: BOWTIE2_HOST_REMOVAL_ALIGN {
        ext.args   = params.host_removal_verysensitive ? "--very-sensitive" : "--sensitive"
        ext.args2  = params.host_removal_save_ids ? "--host_removal_save_ids" : ''
        ext.prefix = { "${meta.id}_run${meta.run}_host_removed" }
        publishDir = [
            [
                path: { "${params.outdir}/QC_shortreads/remove_host" },
                mode: params.publish_dir_mode,
                pattern: "*{.log,read_ids.txt}",
            ],
            [
                path: { "${params.outdir}/QC_shortreads/remove_host" },
                mode: params.publish_dir_mode,
                pattern: "*.unmapped*.fastq.gz",
                enabled: params.save_hostremoved_reads,
            ],
        ]
        tag        = { "${meta.id}_run${meta.run}" }
    }

    withName: FASTQC_TRIMMED {
        ext.args   = '--quiet'
        ext.prefix = { "${meta.id}_run${meta.run}_trimmed" }
        publishDir = [
            path: { "${params.outdir}/QC_shortreads/fastqc" },
            mode: params.publish_dir_mode,
            pattern: "*.html",
        ]
        tag        = { "${meta.id}_run${meta.run}" }
    }

    withName: BBMAP_BBNORM {
        ext.args   = [
            params.bbnorm_target ? "target=${params.bbnorm_target}" : '',
            params.bbnorm_min ? "min=${params.bbnorm_min}" : '',
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/bbmap/bbnorm/logs" },
                enabled: params.save_bbnorm_reads,
                mode: params.publish_dir_mode,
                pattern: "*.log",
            ],
            [
                path: { "${params.outdir}/bbmap/bbnorm/" },
                mode: 'copy',
                enabled: params.save_bbnorm_reads,
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz",
            ],
        ]
    }

    withName: PORECHOP_PORECHOP {
        publishDir = [
            path: { "${params.outdir}/QC_longreads/porechop" },
            mode: params.publish_dir_mode,
            pattern: "*_porechop_trimmed.fastq.gz",
            enabled: params.save_porechop_reads,
        ]
        ext.prefix = { "${meta.id}_run${meta.run}_porechop_trimmed" }
    }

    withName: PORECHOP_ABI {
        publishDir = [
            path: { "${params.outdir}/QC_longreads/porechop" },
            mode: params.publish_dir_mode,
            pattern: "*_porechop-abi_trimmed.fastq.gz",
            enabled: params.save_porechop_reads,
        ]
        ext.prefix = { "${meta.id}_run${meta.run}_porechop-abi_trimmed" }
    }

    withName: FILTLONG {
        ext.args   = {
            [
                "--min_length ${params.longreads_min_length}",
                "--keep_percent ${params.longreads_keep_percent}",
                shortreads ? "--trim" : "",
                "--length_weight ${params.longreads_length_weight}",
                params.longreads_min_quality ? "--min_mean_q ${params.longreads_min_quality}" : '',
            ].join(' ').trim()
        }
        publishDir = [
            path: { "${params.outdir}/QC_longreads/Filtlong" },
            mode: params.publish_dir_mode,
            pattern: "*_filtlong.fastq.gz",
            enabled: params.save_filtered_longreads,
        ]
        ext.prefix = { "${meta.id}_run${meta.run}_filtlong" }
    }

    withName: NANOQ {
        ext.args   = [
            "--min-len ${params.longreads_min_length}",
            params.longreads_min_quality ? "--min-qual ${params.longreads_min_quality}" : '',
            "-vv",
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/QC_longreads/Nanoq" },
                mode: params.publish_dir_mode,
                pattern: "*_nanoq_filtered.fastq.gz",
                enabled: params.save_filtered_longreads,
            ],
            [
                path: { "${params.outdir}/QC_longreads/Nanoq" },
                mode: params.publish_dir_mode,
                pattern: "*_nanoq_filtered.stats",
            ],
        ]
        ext.prefix = { "${meta.id}_run${meta.run}_nanoq_filtered" }
    }

    withName: NANOLYSE {
        publishDir = [
            [
                path: { "${params.outdir}/QC_longreads/NanoLyse" },
                mode: params.publish_dir_mode,
                pattern: "*.log",
            ],
            [
                path: { "${params.outdir}/QC_longreads/NanoLyse" },
                mode: params.publish_dir_mode,
                pattern: "*_nanolyse.fastq.gz",
                enabled: params.save_lambdaremoved_reads,
            ],
        ]
        ext.prefix = { "${meta.id}_run${meta.run}_lambdafiltered" }
    }

    withName: CHOPPER {
        ext.args2  = [
            params.longreads_min_quality ? "--quality ${params.longreads_min_quality}" : '',
            params.longreads_min_length ? "--minlength ${params.longreads_min_length}" : '',
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/QC_longreads/Chopper" },
                mode: params.publish_dir_mode,
                pattern: "*.log",
            ],
            [
                path: { "${params.outdir}/QC_longreads/Chopper" },
                mode: params.publish_dir_mode,
                pattern: "*_chopper.fastq.gz",
                enabled: params.save_lambdaremoved_reads || params.save_filtered_longreads,
            ],
        ]
        ext.prefix = { "${meta.id}_run${meta.run}_chopper" }
    }

    withName: NANOPLOT_RAW {
        ext.prefix = 'raw'
        ext.args   = {
            [
                "-p raw_",
                "--title ${meta.id}_raw",
                "-c darkblue",
            ].join(' ').trim()
        }
        publishDir = [
            path: { "${params.outdir}/QC_longreads/NanoPlot/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{png,html,txt}",
        ]
    }

    withName: NANOPLOT_FILTERED {
        ext.args   = {
            [
                "-p filtered_",
                "--title ${meta.id}_filtered",
                "-c darkblue",
            ].join(' ').trim()
        }
        publishDir = [
            path: { "${params.outdir}/QC_longreads/NanoPlot/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{png,html,txt}",
        ]
    }

    withName: MINIMAP2_HOST_INDEX {
        publishDir = [
            path: { "${params.outdir}/QC_longreads/minimap2/index" },
            mode: params.publish_dir_mode,
            pattern: '*.mmi',
        ]
    }

    withName: MINIMAP2_HOST_ALIGN {
        ext.args   = {
            meta.lr_platform == "OXFORD_NANOPORE"
                ? "-x map-ont"
                : meta.lr_platform == "OXFORD_NANOPORE_HQ"
                    ? "-x lr:hq"
                    : meta.lr_platform == "PACBIO_CLR"
                        ? "-x map-pb"
                        : meta.lr_platform == "PACBIO_HIFI" ? "-x map-hifi" : ""
        }
        ext.prefix = { "${meta.id}_run${meta.run}_host_minimap" }
        publishDir = [
            path: { "${params.outdir}/QC_longreads/minimap2/align}" },
            mode: params.publish_dir_mode,
            pattern: "*.bam",
            enabled: params.save_hostremoved_reads,
        ]
    }

    withName: MINIMAP2_ASSEMBLY_ALIGN {
        ext.args   = {
            meta.lr_platform == "OXFORD_NANOPORE"
                ? "-x map-ont"
                : meta.lr_platform == "OXFORD_NANOPORE_HQ"
                    ? "-x lr:hq"
                    : meta.lr_platform == "PACBIO_CLR"
                        ? "-x map-pb"
                        : meta.lr_platform == "PACBIO_HIFI" ? "-x map-hifi" : ""
        }
        ext.prefix = { "${meta.assembler}-${meta.id}-${meta2.id}" }
        publishDir = [
            path: { "${params.outdir}/Assembly/${meta2.assembler}/QC/${meta2.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{bam,bai}",
            enabled: params.save_assembly_mapped_reads,
        ]
    }

    withName: SAMTOOLS_HOSTREMOVED_UNMAPPED {
        ext.args   = '-f 4'
        ext.prefix = { "${meta.id}_${meta.run}_hostremoved" }
        publishDir = [
            path: { "${params.outdir}/QC_longreads/samtools/fastq" },
            mode: params.publish_dir_mode,
            pattern: '*_hostremoved.fastq.gz',
            enabled: params.save_hostremoved_reads,
        ]
    }

    withName: SAMTOOLS_HOSTREMOVED_STATS {
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            path: { "${params.outdir}/QC_longreads/samtools/stats" },
            mode: params.publish_dir_mode,
            pattern: '*stats',
        ]
    }

    withName: MEGAHIT {
        ext.args   = { params.megahit_options ? params.megahit_options + " -m ${task.memory.toBytes()}" : "-m ${task.memory.toBytes()}" }
        ext.prefix = { "MEGAHIT-${meta.id}" }
        publishDir = [path: { "${params.outdir}/Assembly/MEGAHIT" }, mode: params.publish_dir_mode, pattern: "*.{fa.gz,log}"]
    }

    withName: METASPADES {
        ext.args   = params.spades_options ? params.spades_options + ' --meta' : '--meta'
        ext.prefix = { "SPAdes-${meta.id}" }
        publishDir = [path: { "${params.outdir}/Assembly/SPAdes" }, mode: params.publish_dir_mode, pattern: "*.{fasta.gz,gfa.gz,fa.gz,log}"]
    }

    withName: METASPADESHYBRID {
        ext.args   = params.spades_options ? params.spades_options + ' --meta' : '--meta'
        ext.prefix = { "SPAdesHybrid-${meta.id}" }
        publishDir = [path: { "${params.outdir}/Assembly/SPAdesHybrid" }, mode: params.publish_dir_mode, pattern: "*.{fasta.gz,gfa.gz,fa.gz,log}"]
    }

    withName: FLYE {
        ext.args   = ' --meta'
        ext.prefix = { "FLYE-${meta.id}" }
        publishDir = [path: { "${params.outdir}/Assembly/FLYE" }, mode: params.publish_dir_mode, pattern: "*.{fasta.gz,gfa.gz,log}"]
    }

    withName: METAMDBG_ASM {
        ext.prefix = { "METAMDBG-${meta.id}" }
        publishDir = [path: { "${params.outdir}/Assembly/METAMDBG" }, mode: params.publish_dir_mode, pattern: "*.{fasta.gz,log}"]
    }

    withName: QUAST {
        publishDir = [path: { "${params.outdir}/Assembly/${meta.assembler}/QC/${meta.id}" }, mode: params.publish_dir_mode, saveAs: { filename -> filename.equals('versions.yml') ? null : filename }]
    }

    withName: 'QUAST_BINS|QUAST_BINS_SUMMARY' {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: GENOMAD_ENDTOEND {
        ext.args   = [
            "--cleanup",
            "--min-score ${params.genomad_min_score}",
            "--splits ${params.genomad_splits}",
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/VirusIdentification/geNomad/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: BOWTIE2_ASSEMBLY_ALIGN {
        ext.args   = params.bowtie2_mode ? params.bowtie2_mode : params.ancient_dna ? '--very-sensitive -N 1' : ''
        ext.prefix = { "${meta.id}.assembly" }
        publishDir = [
            [
                path: { "${params.outdir}/Assembly/${assembly_meta.assembler}/QC/${assembly_meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.log",
            ],
            [
                path: { "${params.outdir}/Assembly/${assembly_meta.assembler}/QC/${assembly_meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,bai}",
                enabled: params.save_assembly_mapped_reads,
            ],
        ]
    }

    withName: 'MAG_DEPTHS_PLOT|MAG_DEPTHS_SUMMARY' {
        publishDir = [path: { "${params.outdir}/GenomeBinning/depths/bins" }, mode: params.publish_dir_mode, pattern: "*.{png,tsv}"]
    }

    withName: BIN_SUMMARY {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning" },
            mode: params.publish_dir_mode,
            pattern: "*.{png,tsv}",
        ]
    }

    withName: BUSCO_UNTAR {
        ext.basedir = 'busco_db/lineages'
    }

    withName: BUSCO_BUSCO {
        ext.args   = [
            params.busco_db ? '--offline' : ''
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/QC/BUSCO/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*{.txt,.json,.log,-busco}",
            ],
            [
                path: { "${params.outdir}/GenomeBinning/QC/BUSCO" },
                mode: params.publish_dir_mode,
                overwrite: false,
                pattern: "busco_downloads/lineages/*",
                enabled: params.save_busco_db,
            ],
        ]
    }

    withName: CHECKM_UNTAR {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/CheckM/checkm_downloads" },
            mode: params.publish_dir_mode,
            overwrite: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_checkm_data,
        ]
    }

    withName: CHECKM_LINEAGEWF {
        tag        = { "${meta.assembler}-${meta.binner}-${meta.domain}-${meta.refinement}-${meta.id}" }
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.domain}-${meta.refinement}-${meta.id}_wf" }
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/CheckM" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: CHECKM_QA {
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.domain}-${meta.refinement}-${meta.id}_qa" }
        ext.args   = "-o 2 --tab_table"
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/CheckM" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: CONCAT_BINQC_TSV {
        ext.prefix = { "${params.binqc_tool}_summary" }
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'CONCAT_BUSCO_TSV|CONCAT_CHECKM_TSV|CONCAT_CHECKM2_TSV' {
        ext.prefix = { "${meta.id}_summary" }
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: CHECKM2_DATABASEDOWNLOAD {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/CheckM2/checkm2_downloads" },
            mode: params.publish_dir_mode,
            overwrite: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_checkm2_data,
        ]
    }

    withName: CHECKM2_PREDICT {
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.domain}-${meta.refinement}-${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/CheckM2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: GUNC_DOWNLOADDB {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/GUNC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.gunc_save_db,
        ]
    }

    // Make sure to keep directory in sync with gunc_qc.nf
    withName: GUNC_RUN {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/GUNC/raw/${meta.assembler}-${meta.binner}-${meta.domain}-${meta.refinement}-${meta.id}/${fasta.baseName}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    // Make sure to keep directory in sync with gunc_qc.nf
    withName: GUNC_MERGECHECKM {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/GUNC/checkmmerged/${meta.assembler}-${meta.binner}-${meta.domain}-${meta.refinement}-${meta.id}/${checkm_file.baseName}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: CATPACK_PREPARE {
        publishDir = [
            path: { "${params.outdir}/Taxonomy/CAT/db" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_cat_db,
        ]
    }

    withName: CATPACK_BINS {
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.id}-bins" }
        ext.args   = [
            params.cat_no_suggestive_asterisks ? '--no_stars' : ''
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/Taxonomy/CAT/${meta.assembler}/${meta.binner}/${meta.id}/bins" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: CATPACK_ADDNAMES_BINS {
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.id}-bins_bin2classification.names" }
        ext.args   = params.cat_allow_unofficial_lineages ? "" : "--only_official"
        publishDir = [
            path: { "${params.outdir}/Taxonomy/CAT/${meta.assembler}/${meta.binner}/${meta.id}/bins" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: CATPACK_SUMMARISE_BINS {
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.id}-bins_summary" }
        publishDir = [
            path: { "${params.outdir}/Taxonomy/CAT/${meta.assembler}/${meta.binner}/${meta.id}/bins" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: CATPACK_UNBINS {
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.id}-unbins" }
        ext.args   = [
            params.cat_no_suggestive_asterisks ? '--no_stars' : ''
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/Taxonomy/CAT/${meta.assembler}/${meta.binner}/${meta.id}/unbins" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: CATPACK_ADDNAMES_UNBINS {
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.id}-unbins_contig2classification.names" }
        ext.args   = params.cat_allow_unofficial_lineages ? "" : "--only_official"
        publishDir = [
            path: { "${params.outdir}/Taxonomy/CAT/${meta.assembler}/${meta.binner}/${meta.id}/unbins" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: CATPACK_SUMMARISE_UNBINS {
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.id}-unbins_summary" }
        publishDir = [
            path: { "${params.outdir}/Taxonomy/CAT/${meta.assembler}/${meta.binner}/${meta.id}/unbins" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: GTDBTK_CLASSIFYWF {
        ext.args   = [
            "--extension fa",
            "--min_perc_aa ${params.gtdbtk_min_perc_aa}",
            "--min_af ${params.gtdbtk_min_af}",
            "--pplacer_cpus ${params.gtdbtk_pplacer_cpus}",
            params.gtdbtk_use_full_tree ? "-f" : "",
            params.gtdbtk_skip_aniscreen ? "--skip_ani_screen" : "",
        ].join(' ')
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.domain}-${meta.refinement}-${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/Taxonomy/GTDB-Tk/${meta.assembler}/${meta.binner}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{log,tsv,tree.gz,fasta,fasta.gz}",
        ]
    }

    withName: GTDBTK_SUMMARY {
        ext.args   = "--extension fa"
        publishDir = [path: { "${params.outdir}/Taxonomy/GTDB-Tk" }, mode: params.publish_dir_mode, saveAs: { filename -> filename.equals('versions.yml') ? null : filename }]
    }

    withName: PROKKA {
        ext.args   = {
            [
                params.prokka_with_compliance ? "--metagenome --compliant --centre ${params.prokka_compliance_centre}" : "--metagenome",
                params.prokka_fast_mode ? "--fast" : "",
            ].join(' ').trim()
        }
        publishDir = [path: { "${params.outdir}/Annotation/Prokka/${meta.assembler}" }, mode: params.publish_dir_mode, saveAs: { filename -> filename.equals('versions.yml') ? null : filename }]
    }

    withName: PRODIGAL {
        ext.args   = "-p meta"
        ext.prefix = { "${meta.assembler}-${meta.id}_prodigal" }
        publishDir = [path: { "${params.outdir}/Annotation/Prodigal/${meta.assembler}/${meta.id}" }, mode: params.publish_dir_mode, saveAs: { filename -> filename.equals('versions.yml') ? null : filename }]
    }

    withName: FREEBAYES {
        ext.prefix = { "${meta.assembler}-${meta.id}" }
        ext.args   = "-p ${params.freebayes_ploidy} -q ${params.freebayes_min_basequality} -F ${params.freebayes_minallelefreq}"
        publishDir = [path: { "${params.outdir}/Ancient_DNA/variant_calling/freebayes" }, mode: params.publish_dir_mode, pattern: "*.vcf.gz"]
    }

    withName: BCFTOOLS_VIEW {
        ext.prefix = { "${meta.assembler}-${meta.id}.filtered" }
        ext.args   = "-Oz -W=tbi -v snps,mnps -i 'QUAL>=${params.bcftools_view_high_variant_quality} || (QUAL>=${params.bcftools_view_medium_variant_quality} && FORMAT/AO>=${params.bcftools_view_minimal_allelesupport})'"
        publishDir = [path: { "${params.outdir}/Ancient_DNA/variant_calling/filtered" }, mode: params.publish_dir_mode, pattern: "*.vcf.gz"]
    }

    withName: BCFTOOLS_CONSENSUS {
        ext.prefix = { "${meta.assembler}-${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/Ancient_DNA/variant_calling/consensus" },
            mode: params.publish_dir_mode,
            pattern: "*.fa",
        ]
    }

    withName: BCFTOOLS_INDEX {
        ext.prefix = { "${meta.assembler}-${meta.id}" }
        ext.args   = "-t"
        publishDir = [
            path: { "${params.outdir}/Ancient_DNA/variant_calling/index" },
            mode: params.publish_dir_mode,
            enabled: false,
        ]
    }

    withName: PYDAMAGE_ANALYZE {
        ext.prefix = { "${meta.assembler}-${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/Ancient_DNA/pydamage/analyze/${meta.assembler}-${meta.id}/" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: PYDAMAGE_FILTER {
        ext.prefix = { "${meta.assembler}-${meta.id}" }
        ext.args   = "-t ${params.pydamage_accuracy}"
        publishDir = [
            path: { "${params.outdir}/Ancient_DNA/pydamage/filter/${meta.assembler}-${meta.id}/" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: SAMTOOLS_FAIDX {
        ext.prefix = { "${meta.assembler}-${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/Ancient_DNA/samtools/faidx" },
            mode: params.publish_dir_mode,
            enabled: false,
        ]
    }

    withName: METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS_SHORTREAD {
        ext.args   = params.shortread_percentidentity ? "--percentIdentity ${params.shortread_percentidentity}" : ''
        publishDir = [path: { "${params.outdir}/GenomeBinning/depths/contigs" }, mode: params.publish_dir_mode, pattern: '*-depth.txt.gz']
        ext.prefix = { "${meta.assembler}-${meta.id}-depth" }
    }

    withName: METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS_LONGREAD {
        ext.args   = params.longread_percentidentity ? "--percentIdentity ${params.longread_percentidentity}" : ''
        publishDir = [path: { "${params.outdir}/GenomeBinning/depths/contigs" }, mode: params.publish_dir_mode, pattern: '*-depth.txt.gz']
        ext.prefix = { "${meta.assembler}-${meta.id}-depth" }
    }

    withName: METABAT2_METABAT2 {
        publishDir = [[path: { "${params.outdir}/GenomeBinning/MetaBAT2/bins/" }, mode: params.publish_dir_mode, pattern: '*[!lowDepth|tooShort|unbinned].fa.gz'], [path: { "${params.outdir}/GenomeBinning/MetaBAT2/discarded" }, mode: params.publish_dir_mode, pattern: '*tooShort.fa.gz'], [path: { "${params.outdir}/GenomeBinning/MetaBAT2/discarded" }, mode: params.publish_dir_mode, pattern: '*lowDepth.fa.gz']]
        ext.prefix = { "${meta.assembler}-MetaBAT2-${meta.id}" }
        ext.args   = [
            params.min_contig_size < 1500 ? "-m 1500" : "-m ${params.min_contig_size}",
            "--unbinned",
            "--seed ${params.metabat_rng_seed}",
        ].join(' ').trim()
    }

    withName: MAXBIN2 {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/MaxBin2/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*.tooshort.gz',
            ],
            [
                path: { "${params.outdir}/GenomeBinning/MaxBin2/" },
                mode: params.publish_dir_mode,
                pattern: '*.{summary,abundance}',
            ],
        ]
        ext.prefix = { "${meta.assembler}-MaxBin2-${meta.id}" }
    }

    withName: ADJUST_MAXBIN2_EXT {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/MaxBin2/bins/" },
                mode: params.publish_dir_mode,
                pattern: '*.fa.gz',
            ]
        ]
    }

    withName: CONCOCT_CUTUPFASTA {
        ext.args = [
            "-c ${params.bin_concoct_chunksize}",
            "-o ${params.bin_concoct_overlap}",
            params.bin_concoct_donotconcatlast ? "" : "--merge_last",
        ].join(' ').trim()
    }

    withName: 'CONCOCT_.*' {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/CONCOCT/stats/" },
                mode: params.publish_dir_mode,
                pattern: "*.{txt,csv,tsv}",
            ],
            [
                path: { "${params.outdir}/GenomeBinning/CONCOCT/bins" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> new File(filename).getName() },
                pattern: "*/*.fa.gz",
            ],
        ]
        ext.prefix = { "${meta.assembler}-CONCOCT-${meta.id}" }
    }

    withName: SEQKIT_STATS {
        ext.args   = ""
        publishDir = [enabled: false]
    }

    withName: SPLIT_FASTA {
        publishDir = [[path: { "${params.outdir}/GenomeBinning/${meta.binner}/unbinned" }, mode: params.publish_dir_mode, pattern: '*.*[0-9].fa.gz'], [path: { "${params.outdir}/GenomeBinning/${meta.binner}/unbinned/discarded" }, mode: params.publish_dir_mode, pattern: '*.pooled.fa.gz'], [path: { "${params.outdir}/GenomeBinning/${meta.binner}/unbinned/discarded" }, mode: params.publish_dir_mode, pattern: '*.remaining.fa.gz']]
    }

    withName: DASTOOL_FASTATOCONTIG2BIN_METABAT2 {
        ext.prefix = { "${meta.assembler}-MetaBAT2-${meta.id}" }
    }

    withName: DASTOOL_FASTATOCONTIG2BIN_MAXBIN2 {
        ext.prefix = { "${meta.assembler}-MaxBin2-${meta.id}" }
    }

    withName: DASTOOL_FASTATOCONTIG2BIN_CONCOCT {
        ext.prefix = { "${meta.assembler}-CONCOCT-${meta.id}" }
    }

    withName: DASTOOL_FASTATOCONTIG2BIN_TIARA {
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.id}" }
    }

    withName: DASTOOL_DASTOOL {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/DASTool" },
                mode: params.publish_dir_mode,
                pattern: '*.{tsv,log,eval,seqlength}',
            ]
        ]
        ext.prefix = { "${meta.assembler}-DASTool-${meta.id}" }
        ext.args   = "--write_bins --write_unbinned --write_bin_evals --score_threshold ${params.refine_bins_dastool_threshold}"
    }

    withName: RENAME_POSTDASTOOL {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/DASTool/unbinned" },
                mode: params.publish_dir_mode,
                pattern: '*-DASToolUnbinned-*.fa',
            ],
            [
                path: { "${params.outdir}/GenomeBinning/DASTool/bins" },
                mode: params.publish_dir_mode,
                pattern: '*-{MetaBAT2,MaxBin2,CONCOCT}Refined-*.fa',
            ],
        ]
    }

    withName: TIARA_TIARA {
        publishDir = [
            path: { "${params.outdir}/Taxonomy/Tiara/" },
            mode: params.publish_dir_mode,
            pattern: "*.txt",
        ]
        ext.args   = { "--min_len ${params.tiara_min_length} --probabilities" }
        ext.prefix = { "${meta.assembler}-${meta.id}.tiara" }
    }

    withName: TIARA_CLASSIFY {
        ext.args   = { "--join_prokaryotes --assembler ${meta.assembler}" }
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.bin}-${meta.id}" }
    }

    withName: TIARA_SUMMARY {
        publishDir = [path: { "${params.outdir}/GenomeBinning/Tiara" }, mode: params.publish_dir_mode, pattern: "tiara_summary.tsv"]
        ext.prefix = "tiara_summary"
    }

    withName: MMSEQS_DATABASES {
        ext.prefix = { "${params.metaeuk_mmseqs_db.replaceAll("/", "-")}" }
        publishDir = [path: { "${params.outdir}/Annotation/mmseqs_db/" }, mode: params.publish_dir_mode, saveAs: { filename -> filename.equals('versions.yml') ? null : filename }, enabled: params.save_mmseqs_db]
    }

    withName: METAEUK_EASYPREDICT {
        ext.args   = ""
        ext.prefix = { "${meta.id}" }
        publishDir = [path: { "${params.outdir}/Annotation/MetaEuk/${meta.assembler}/${meta.id}" }, mode: params.publish_dir_mode, saveAs: { filename -> filename.equals('versions.yml') ? null : filename }]
    }
    withName: MULTIQC {
        ext.args   = { params.multiqc_title ? "--title \"${params.multiqc_title}\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}
